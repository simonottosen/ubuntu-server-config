version: "3.9"

services:
  traefik:
    image: "traefik"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=simnik123@gmail.com"
      - "--certificatesresolvers.mytlschallenge.acme.storage=./config/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "443:443"
      - "80:80"
      - "8090:8080"
    volumes:
      #- "--certificatesresolvers.mytlschallenge.acme.storage=config/letsencrypt/acme.json" 
      - "./config/letsencrypt:/config/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
    
    
  gluetun:
    image: qmcgaw/gluetun
    container_name: "gluetun"
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - NET_ADMIN
    ports:
      - 55183:55183
    environment:
      - VPN_SERVICE_PROVIDER=mullvad
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=${PRIVATEKEY_MULLVAD}
      - WIREGUARD_ADDRESSES=10.65.81.143/32
      - SERVER_CITIES=Copenhagen
      - FIREWALL_VPN_INPUT_PORTS=55183
    labels:
      - "autoheal=true"
      - "traefik.enable=true"
      - "traefik.http.routers.torrent.rule=Host(`torrent.simonottosen.dk`)"
      - "traefik.http.routers.torrent.entrypoints=websecure"
      - "traefik.http.routers.torrent.tls.certresolver=mytlschallenge"
      - "traefik.http.services.torrent.loadbalancer.server.port=3001"
    restart: unless-stopped
    networks:
      - cloudflared

      
  webserver:
    image: "nginx:alpine"
    container_name: "webserver"
    volumes:
      - ./webserver:/usr/share/nginx/html
    restart: unless-stopped
    #ports:
    #  - 80:80
    networks:
      - cloudflared

  filippa:
    image: "nginx:alpine"
    container_name: "filippa"
    volumes:
      - ./filippa:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filippa.rule=Host(`filippa.simonottosen.dk`)"
      - "traefik.http.routers.filippa.entrypoints=websecure"
      - "traefik.http.routers.filippa.tls.certresolver=mytlschallenge"
    restart: unless-stopped
    networks:
      - cloudflared
      
      
      
  reverse-proxy:
    image: "nginx:alpine"
    container_name: "reverse-proxy"
    volumes:
      - ./config/reverse_proxy:/etc/nginx/conf.d
    restart: unless-stopped
    networks:
      - cloudflared


    
  jupyter:
    restart: always
    image: jupyter/scipy-notebook
    container_name: "jupyter"
    volumes:
      - ./jupyter:/home/jovyan/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`jupyter.simonottosen.dk`)"
      - "traefik.http.routers.jupyter.entrypoints=websecure"
      - "traefik.http.routers.jupyter.tls.certresolver=mytlschallenge"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
    networks:
      - cloudflared

  speedtest:
      container_name: speedtest
      image: henrywhitaker3/speedtest-tracker
      volumes:
          - /config/speedtest:/config
      environment:
          - OOKLA_EULA_GDPR=true
      logging:
          driver: "json-file"
          options:
              max-file: "10"
              max-size: "200k"
      restart: unless-stopped
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.speedtest.rule=Host(`speedtest.simonottosen.dk`)"
        - "traefik.http.routers.speedtest.entrypoints=websecure"
        - "traefik.http.routers.speedtest.tls.certresolver=mytlschallenge"
        - "traefik.http.services.speedtest.loadbalancer.server.port=80"
      networks:
        - cloudflared

##  omada-controller:
##    container_name: omada-controller
##    image: mbentley/omada-controller:latest
##    restart: unless-stopped
##    network_mode: host
##    environment:
##      - SHOW_SERVER_LOGS=true
##      - SHOW_MONGODB_LOGS=false
##      - TZ=Etc/UTC
##      - MANAGE_HTTP_PORT=8088
##      - MANAGE_HTTPS_PORT=8043
##      - PORTAL_HTTP_PORT=8088
##      - PORTAL_HTTPS_PORT=8843
##      - PORT_APP_DISCOVERY=27001
##      - PORT_ADOPT_V1=29812
##      - PORT_UPGRADE_V1=29813
##      - PORT_MANAGER_V1=29811
##      - PORT_MANAGER_V2=29814
##      - PORT_DISCOVERY=29810
##    volumes:
##      - /config/omada-data:/opt/tplink/EAPController/data
##      - /config/omada-logs:/opt/tplink/EAPController/logs


  unifi-controller:
    image: lscr.io/linuxserver/unifi-controller:latest
    container_name: unifi-controller
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - MEM_LIMIT=1024 
      - MEM_STARTUP=1024 
    volumes:
      - /config/unifi:/config
    ports:
      - 8445:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    restart: unless-stopped

  hjem:
    image: tpanum/hjem
    container_name: "houseprice"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hjem.rule=Host(`houseprice.simonottosen.dk`)"
      - "traefik.http.routers.hjem.entrypoints=websecure"
      - "traefik.http.routers.hjem.tls.certresolver=mytlschallenge"
      - "traefik.http.services.hjem.loadbalancer.server.port=8080"
    networks:
      - cloudflared

  busybox:
    image: yauritux/busybox-curl
    container_name: "busybox"
    restart: unless-stopped
    networks:
      - cloudflared
    tty: true

  cph_postgres_db:
    image: postgres:14
    container_name: "cph_postgres_db"
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - ./cph/db:/var/lib/postgresql/data
      - ./cph-security/database/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    restart: unless-stopped
    networks:
      - cloudflared

  cph_postgrest:
    image: postgrest/postgrest
    container_name: "cph_postgrest"
    depends_on:
      - cph_postgres_db
    restart: unless-stopped
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGRST_DB_URI: ${PGRST_DB_URI}
      PGRST_DB_SCHEMAS: public
      PGRST_OPENAPI_SERVER_PROXY_URI: https://cphapi.simonottosen.dk
      PGRST_DB_ANON_ROLE: web_anon
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cphapi.rule=Host(`cphapi.simonottosen.dk`)"
      - "traefik.http.routers.cphapi.entrypoints=websecure"
      - "traefik.http.routers.cphapi.tls.certresolver=mytlschallenge"
      - "traefik.http.services.cphapi.loadbalancer.server.port=3000"
    networks:
      - cloudflared

  swagger-ui:
    container_name: cph_swagger-ui
    image: swaggerapi/swagger-ui:latest
    depends_on:
      - cph_postgres_db
    environment:
      - API_URL=https://cphapi.simonottosen.dk/
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swagger.rule=Host(`swagger.simonottosen.dk`)"
      - "traefik.http.routers.swagger.entrypoints=websecure"
      - "traefik.http.routers.swagger.tls.certresolver=mytlschallenge"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"
    networks:
      - cloudflared

  universal_fetchtime:
    image: "ghcr.io/simonottosen/cph-security_fetchtime:main"
    container_name: "universal_fetchtime"
    user: user
    depends_on:
      - cph_postgres_db
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      CPHAPI_HOST: ${CPHAPI_HOST}
      FRA_HEALTHCHECK: ${FRA_HEALTHCHECK}
      ARN_HEALTHCHECK: ${ARN_HEALTHCHECK}
      CPH_HEALTHCHECK: ${CPH_HEALTHCHECK}
      OSL_HEALTHCHECK: ${OSL_HEALTHCHECK}
      DUS_HEALTHCHECK: ${DUS_HEALTHCHECK}
      AMS_HEALTHCHECK: ${AMS_HEALTHCHECK}
      BER_HEALTHCHECK: ${BER_HEALTHCHECK}
      DUB_HEALTHCHECK: ${DUB_HEALTHCHECK}
      GOOGLE_APPLICATION_CREDENTIALS: /home/user/app/keyfile.json
    restart: unless-stopped
    volumes:
      - ${GCP_KEY_PATH}:/home/user/app/keyfile.json:ro
    networks:
      - cloudflared
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.dus.schedule=@every 5m"
      - "ofelia.job-exec.dus.command=dus-fetch"
      - "ofelia.job-exec.fra.schedule=@every 5m"
      - "ofelia.job-exec.fra.command=fra-fetch"
      - "ofelia.job-exec.cph.schedule=@every 5m"
      - "ofelia.job-exec.cph.command=cph-fetch"
      - "ofelia.job-exec.osl.schedule=@every 5m"
      - "ofelia.job-exec.osl.command=osl-fetch"
      - "ofelia.job-exec.arn.schedule=@every 5m"
      - "ofelia.job-exec.arn.command=arn-fetch"
      - "ofelia.job-exec.ber.schedule=@every 5m"
      - "ofelia.job-exec.ber.command=ber-fetch"
      - "ofelia.job-exec.ams.schedule=@every 5m"
      - "ofelia.job-exec.ams.command=ams-fetch"
      - "ofelia.job-exec.dub.schedule=@every 5m"
      - "ofelia.job-exec.dub.command=dub-fetch"


  ofelia:
    container_name: "ofelia_scheduler"
    image: mcuadros/ofelia:latest
    restart: always
    depends_on:
      - universal_fetchtime
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  cph_frontend_nextgen:
    image: "ghcr.io/simonottosen/cph-security_frontend-nextgen:main"
    container_name: "cph_frontend_nextgen"
    restart: unless-stopped
    ports:
      - "3010:3030"
    networks:
      - cloudflared
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro


  apisix_dashboard:
    image: apache/apisix-dashboard
    container_name: "apisix_dashboard"
    restart: always
    volumes:
    - ./config/apisix_dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
    - "9000:9000"
    networks:
      - cloudflared

  apisix:
    container_name: "apisix"
    image: apache/apisix
    restart: always
    volumes:
      - ./config/apisix_conf/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    depends_on:
      - etcd
    ##network_mode: host
    ports:
      - "9180:9180/tcp"
      - "9080:9080/tcp"
      - "9091:9091/tcp"
      - "9443:9443/tcp"
      - "9092:9092/tcp"
    networks:
      - cloudflared

  etcd:
    container_name: "etcd"
    image: bitnami/etcd:3.4.15
    restart: always
    volumes:
      - ./config/etcd_data:/bitnami/etcd
    environment:
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    ports:
      - "2379:2379/tcp"
    networks:
      - cloudflared

  prometheus:
    image: prom/prometheus:v2.25.0
    restart: always
    volumes:
      - ./config/prometheus_conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - cloudflared

  grafana:
    image: grafana/grafana:7.3.7
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - "./config/grafana_conf/provisioning:/etc/grafana/provisioning"
      - "./config/grafana_conf/dashboards:/var/lib/grafana/dashboards"
      - "./config/grafana_conf/config/grafana.ini:/etc/grafana/grafana.ini"
    networks:
      - cloudflared


  flood:
    image: jesec/flood
    container_name: "flood"
    user: 1000:1000
    depends_on:
      - rtorrent
      - gluetun
    restart: unless-stopped
    command: --port 3001 --allowedpath /data
    environment:
      HOME: /config
    volumes:
      - ./config/rtorrent:/config
      - ./downloads:/data
    #ports:
    #  - 3001:3001
    #labels:
    #  - "traefik.enable=true"
    #  - "traefik.http.routers.torrent.rule=Host(`torrent.simonottosen.dk`)"
    #  - "traefik.http.routers.torrent.entrypoints=websecure"
    #  - "traefik.http.routers.torrent.tls.certresolver=mytlschallenge"
    #  - "traefik.http.services.torrent.loadbalancer.server.port=3001"
    network_mode: "container:gluetun"

      
  rtorrent:
    image: jesec/rtorrent
    container_name: "rtorrent"
    user: 1000:1000
    restart: unless-stopped
    depends_on:
      - gluetun
    command: -o network.port_range.set=55183-55183,system.daemon.set=true
    environment:
      HOME: /config
    volumes:
      - ./config/rtorrent:/config
      - ./downloads:/data
    #ports:
    #  - 55183:55183
    network_mode: "container:gluetun"


  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ./config/plex:/config
      - ./downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=false"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      # port 80 will go through Traefik
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      - "TZ=Europe/Copenhagen"
      - "WEBPASSWORD=${PASSWORD}"
      - "VIRTUAL_HOST=pihole.servermat"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls.certresolver=mytlschallenge"
      - "traefik.http.routers.pihole.rule=Host(`pihole.simonottosen.dk`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
    volumes:
      - pihole:/etc/pihole
    restart: unless-stopped

  tunnel:
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=$TUNNEL_TOKEN
    networks:
      - cloudflared

  ml_api:
    image: "ghcr.io/simonottosen/cph-security_ml_api:main"
    container_name: "ml_api"
    ports:
      - "5000:5000"
    depends_on:
      - cph_postgres_db
      - cph_postgrest
    environment:
      CPHAPI_HOST: ${CPHAPI_HOST}
    restart: unless-stopped
    networks:
      - cloudflared

volumes:
  pihole:
    name: pihole
     
networks:
    cloudflared:
        name: cloudflared
      
