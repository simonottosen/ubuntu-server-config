version: "3.3"
services:

  traefik:
    image: "traefik"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=simnik123@gmail.com"
      - "--certificatesresolvers.mytlschallenge.acme.storage=./config/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "443:443"
      - "80:80"
      - "8090:8080"
    volumes:
      #- "--certificatesresolvers.mytlschallenge.acme.storage=config/letsencrypt/acme.json" 
      - "./config/letsencrypt:/config/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped

  jupyter:
    restart: always
    image: tensorflow/tensorflow:latest-jupyter
    container_name: "jupyter"
    volumes:
      - ./jupyter:/tf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`jupyter.simonottosen.dk`)"
      - "traefik.http.routers.jupyter.entrypoints=websecure"
      - "traefik.http.routers.jupyter.tls.certresolver=mytlschallenge"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}

  speedtest:
      container_name: speedtest
      image: henrywhitaker3/speedtest-tracker
      volumes:
          - /config/speedtest:/config
      environment:
          - OOKLA_EULA_GDPR=true
      logging:
          driver: "json-file"
          options:
              max-file: "10"
              max-size: "200k"
      restart: unless-stopped
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.speedtest.rule=Host(`speedtest.simonottosen.dk`)"
        - "traefik.http.routers.speedtest.entrypoints=websecure"
        - "traefik.http.routers.speedtest.tls.certresolver=mytlschallenge"
        - "traefik.http.services.speedtest.loadbalancer.server.port=80"


  omada-controller:
    container_name: omada-controller
    image: mbentley/omada-controller:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
      - TZ=Etc/UTC
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8843
      - PORT_APP_DISCOVERY=27001
      - PORT_ADOPT_V1=29812
      - PORT_UPGRADE_V1=29813
      - PORT_MANAGER_V1=29811
      - PORT_MANAGER_V2=29814
      - PORT_DISCOVERY=29810
    volumes:
      - /config/omada-data:/opt/tplink/EAPController/data
      - /config/omada-logs:/opt/tplink/EAPController/logs


  unifi-controller:
    image: lscr.io/linuxserver/unifi-controller:latest
    container_name: unifi-controller
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - MEM_LIMIT=1024 
      - MEM_STARTUP=1024 
    volumes:
      - /config/unifi:/config
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp #optional
      #- 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    restart: unless-stopped

  hjem:
    image: tpanum/hjem
    container_name: "houseprice"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hjem.rule=Host(`houseprice.simonottosen.dk`)"
      - "traefik.http.routers.hjem.entrypoints=websecure"
      - "traefik.http.routers.hjem.tls.certresolver=mytlschallenge"
      - "traefik.http.services.hjem.loadbalancer.server.port=8080"

  cph_postgres_db:
    image: postgres:14
    container_name: "cph_postgres_db"
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - ./cph/db:/var/lib/postgresql/data
      - ./cph-security/database/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    restart: unless-stopped

  cph_postgrest:
    image: postgrest/postgrest
    container_name: "cph_postgrest"
    depends_on:
      - cph_postgres_db
    restart: unless-stopped
    environment: 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGRST_DB_URI: ${PGRST_DB_URI}
      PGRST_DB_SCHEMAS: public
      PGRST_OPENAPI_SERVER_PROXY_URI: https://cphapi.simonottosen.dk
      PGRST_DB_ANON_ROLE: web_anon
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cphapi.rule=Host(`cphapi.simonottosen.dk`)"
      - "traefik.http.routers.cphapi.entrypoints=websecure"
      - "traefik.http.routers.cphapi.tls.certresolver=mytlschallenge"
      - "traefik.http.services.cphapi.loadbalancer.server.port=3000"

  swagger-ui:
    container_name: cph_swagger-ui
    image: swaggerapi/swagger-ui:latest
    depends_on:
      - cph_postgres_db
    environment:
      - API_URL=https://cphapi.simonottosen.dk/
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swagger.rule=Host(`swagger.simonottosen.dk`)"
      - "traefik.http.routers.swagger.entrypoints=websecure"
      - "traefik.http.routers.swagger.tls.certresolver=mytlschallenge"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"

  cph_fetchtime:
    image: "ghcr.io/simonottosen/cph-security_backend:main"
    container_name: "cph_fetchtime"
    user: user
    depends_on:
      - cph_postgres_db
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      CPHAPI_HOST: ${CPHAPI_HOST}
      HEALTHCHECK: ${HEALTHCHECK}
      GOOGLE_APPLICATION_CREDENTIALS: /home/user/app/keyfile.json
    restart: unless-stopped
    volumes:
      - ${GCP_KEY_PATH}:/home/user/app/keyfile.json:ro
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.app.schedule: "@every 5m"
      ofelia.job-exec.app.command: "fetch"

  ofelia:
    container_name: "cph_fetchtime_scheduler"
    image: mcuadros/ofelia:latest
    restart: always
    depends_on:
      - cph_fetchtime
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro


  cph_frontend:
    image: "ghcr.io/simonottosen/cph-security_frontend:main"
    container_name: "cph_frontend"
    volumes:
      - ./cph-security/frontend/:/frontend/project
    depends_on:
      - cph_postgres_db
    environment:
      CPHAPI_HOST: ${CPHAPI_HOST}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cph.rule=Host(`cph.simonottosen.dk`)"
      - "traefik.http.routers.cph.entrypoints=websecure"
      - "traefik.http.routers.cph.tls.certresolver=mytlschallenge"
      - "traefik.http.services.cph.loadbalancer.server.port=8501"


  electricityprice:
    build:
      context: ./electricityprice
      dockerfile: Dockerfile
    container_name: electricityprice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.electricityprice.rule=Host(`electricity.simonottosen.dk`)"
      - "traefik.http.routers.electricityprice.entrypoints=websecure"
      - "traefik.http.routers.electricityprice.tls.certresolver=mytlschallenge"
      - "traefik.http.services.electricityprice.loadbalancer.server.port=8050"
    restart: unless-stopped

  webserver:
    image: "nginx:alpine"
    container_name: "webserver"
    volumes:
      - ./webserver:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`simonottosen.dk`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=mytlschallenge"
    restart: unless-stopped


  devops:
    image: "nginx:alpine"
    container_name: "devops"
    volumes:
      - ./devops:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.devops.rule=Host(`devops.simonottosen.dk`)"
      - "traefik.http.routers.devops.entrypoints=websecure"
      - "traefik.http.routers.devops.tls.certresolver=mytlschallenge"
    restart: unless-stopped

  webhook:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webhook
    restart: unless-stopped
    user: 1000:1000
    healthcheck:
      test: "curl -sS --fail 127.0.0.1:9000 || exit 1"
      interval: 120s
      timeout: 5s
      retries: 5
    volumes:
      - ./hooks/:/etc/webhook
      - ./scripts/:/scripts/
      - /var/run/docker.sock:/var/run/docker.sock
      - ./pipe:/hostpipe
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webhook.rule=Host(`webhook.simonottosen.dk`)"
      - "traefik.http.routers.webhook.entrypoints=websecure"
      - "traefik.http.routers.webhook.tls.certresolver=mytlschallenge"
      - "traefik.http.services.webhook.loadbalancer.server.port=9000"
      - traefik.http.routers.webhook.rule=PathPrefix(`/webhook`)
      - traefik.http.routers.webhook.middlewares=webhook-stripprefix
      - traefik.http.middlewares.webhook-stripprefix.stripprefix.prefixes=/webhook

  flood:
    image: jesec/flood
    container_name: "flood"
    user: 1000:1000
    restart: unless-stopped
    command: --port 3001 --allowedpath /data
    environment:
      HOME: /config
    volumes:
      - ./config/rtorrent:/config
      - ./downloads:/data
    ports:
      - 3001:3001
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.torrent.rule=Host(`torrent.simonottosen.dk`)"
      - "traefik.http.routers.torrent.entrypoints=websecure"
      - "traefik.http.routers.torrent.tls.certresolver=mytlschallenge"
      - "traefik.http.services.torrent.loadbalancer.server.port=3001"
      
  rtorrent:
    image: jesec/rtorrent
    container_name: "rtorrent"
    user: 1000:1000
    restart: unless-stopped
    command: -o network.port_range.set=6881-6881,system.daemon.set=true
    environment:
      HOME: /config
    volumes:
      - ./config/rtorrent:/config
      - ./downloads:/data
    ports:
      - 6881:6881

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ./config/plex:/config
      - ./downloads:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=false"
